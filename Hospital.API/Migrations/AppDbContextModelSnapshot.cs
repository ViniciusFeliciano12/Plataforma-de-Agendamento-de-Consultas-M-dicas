// <auto-generated />
using System;
using Events.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("Events.API.Models.ConsultaModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataEHora")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Observacoes")
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoConsulta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Events.API.Models.EspecialidadeModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Especialidade")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Events.API.Models.MedicoModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EspecialidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistroProfissional")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Events.API.Models.PacienteModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Events.API.Models.RecepcionistaModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("TEXT");

                    b.Property<double?>("Telefone")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Recepcionistas");
                });

            modelBuilder.Entity("Events.API.Models.ConsultaModel", b =>
                {
                    b.HasOne("Events.API.Models.MedicoModel", "Medico")
                        .WithMany("ConsultasMedicas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.API.Models.PacienteModel", "Paciente")
                        .WithMany("ConsultasMedicas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Events.API.Models.MedicoModel", b =>
                {
                    b.HasOne("Events.API.Models.EspecialidadeModel", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId");

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Events.API.Models.MedicoModel", b =>
                {
                    b.Navigation("ConsultasMedicas");
                });

            modelBuilder.Entity("Events.API.Models.PacienteModel", b =>
                {
                    b.Navigation("ConsultasMedicas");
                });
#pragma warning restore 612, 618
        }
    }
}
